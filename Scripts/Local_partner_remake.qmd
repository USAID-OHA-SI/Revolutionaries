---
title: "Data Visualization Remake"
author: "Tim Essam, Karishma Srinkanth & Aaron Chafetz"
format: html
editor: visual
---

## Local Partner Data

The data used in this lesson are from the [**PEPFAR 2022 Annual Report to Congress**](https://www.state.gov/wp-content/uploads/2022/05/PEPFAR2022.pdf). The .csv file consists of PEPFAR operating units that received funding to local and international partners. The share of funding is represented in the local and international columns.

### Preparing your work space

To load, munge and visualize the data requires numerous R packages. The code chunk below prepares your R-Studio environment.

```{r prep environment}
#| echo: false
#| warnings: false
library(tidyverse)
library(vroom)
library(glitr)
library(scales) # for formatting

```

## Loading and inspecting the data

You can load the data directly from github using the `vroom` package.

```{r load libraries}
url <- "https://raw.githubusercontent.com/USAID-OHA-SI/Revolutionaries/main/Data_public/PEPFAR_local_partner_share.csv"

df <- vroom(url)
glimpse(df)
```

Let's start be remaking the original visual in the default format you would likely see in an Excel workbook. Creating a stacked bar graph is much easier if we have the data stacked in a long format. We will also apply some colors to the type of funding.

```{r Excel remake}
#| echo: false

# Set the colors
blue <- "#3C67BE"
orange <- "#F27A2A"
  
# Reshape the data so there is a single column for the share value and a column for the type of funding
df_long <- 
  df %>% 
  mutate(operating_unit = fct_relevel(operating_unit, "Total", after = Inf)) %>% 
    pivot_longer(
    cols = local:international,
    names_to = "type",
    values_to = "share"
  ) %>%
  mutate(fill_color = case_when(
    type == "Local" ~ blue,
    TRUE ~ orange
    )
  ) %>% 
  rename(ou = operating_unit, 
         ou_long = operating_unit_long) 
  

glimpse(df_long)
```

With the data reshaped, we can now move forward on creating a stacked bar graph.

```{r stacked bar}
p1 <- df_long %>% 
      ggplot(aes(x = share, y = ou)) +
        geom_col(aes(fill = type), width = 0.5) +
        scale_fill_manual(values = c("local" = blue, "international" = orange)) +
        geom_label(aes(label = percent(share, 1)),
          size = 8 / .pt,
          position = position_stack(vjust = 0.5)
        ) +
        labs(
          x = NULL, y = NULL,
          title = "FY 21 Local vs. International Budget - All Agencies",
          fill = NULL
        ) +
        scale_x_continuous(labels = percent, breaks = seq(0, 1, .1)) +
        coord_cartesian(clip = "off", expand = F)  
p1
```

# Custom Themes

We can create custom themes by building off the foundation of some of the built-in ggplot2 themes. In the code chunk below, we create a new theme called `theme_custom`.

```{r custom theme}
# Create a custom theme to apply to our plot
theme_custom <- function(...) {
  ggplot2::theme_gray() %+replace%
    theme(
      legend.position = "bottom", # moves the legend to the bottom
      axis.ticks = element_blank(), # no ticks
      panel.grid.major = element_line(color = grey30k), #use glitr grey30k color
      panel.background = element_rect(fill = "white"), #make the panel background white
      panel.border = element_blank(), #no border
      axis.line = element_blank() # no axis lines
    )
}
```

To apply the theme we call our new theme function to the ggplot2 object `p1` that we created above. We can rotate the plot 90 degrees using the `coord_flip()` function.

```{r coord_flip}
p1 +  theme_custom() 


```
