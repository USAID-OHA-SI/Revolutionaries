---
title: "Data Visualization Remake Take 2"
author: 
  - name: Tim Essam
  - name: Karishma Srikanth
  - name: Aaron Chafetz
date: 3/6/2024
date-format: long
format: 
  html:
    theme: 
      light: flatly
      dark: darkly
    toc: true
editor: visual
fig-dpi: 300
execute:
  warning: false
  output: true
---

### Local Partner Data

The data used in this lesson are from the [**PEPFAR 2022 Annual Report to Congress**](https://www.state.gov/wp-content/uploads/2022/05/PEPFAR2022.pdf). The .csv file consists of PEPFAR operating units that received funding to local and international partners. The share of funding is represented in the local and international columns.

### Preparing your work space

To load, munge, and visualize the data requires numerous R packages. The code chunk below prepares your R-Studio environment. If you do not have any of the packages referenced below, you'll need to download them from CRAN or GitHub.

```{r}
#| label: prep environment
#| output: false

library(tidyverse) 
library(vroom) # for loading data
library(glitr) # for custom colors
library(scales) # for formatting
library(glue) # useful for creating dynamic text
library(gt) # create beautiful tables
library(gtExtras) # adorn gt tables
library(systemfonts) # register fonts with R

```

### Loading the data

You can load the local partner data directly from GitHub using the `vroom` package. In the code below, we create an object (url) that points to data on our GitHub repo. You can use this argument in vroom's `vroom()` to read in the data.

```{r}
#| label: load libraries
#| output: false
url <- "https://raw.githubusercontent.com/USAID-OHA-SI/Revolutionaries/main/Data_public/PEPFAR_local_partner_share.csv"

df <- vroom(url)
```

### Inspecting the data

There are numerous options for reviewing data frame objects in R. The `View()` function is great for seeing the tabular layout of the data. You can also use `glimpse()` to get a short preview of each column, or even the `gt` package to create a nicely formatted table.

::: panel-tabset
#### glimpse

```{r}
#| label: inspect initial
# Inspect the data
glimpse(df)
```

#### gt preview

```{r}
#| label: tabular preview
# Preview as a gt table
# View the resulting data frame as a table
df %>% 
  slice(1:10) %>%  
  gt::gt() %>% 
  gtExtras::gt_theme_nytimes()
```
:::

### Reshaping & Creating Color Objects

Making a stacked bar graph is easier if your data are in a long format. For this example, we'd like to stack the share of funding into a single column and to create a new column that captures the type of funding. We also to assign a blue color to locally funded partners and orange to international. We finish by renaming our operating unit variable.

::: panel-tabset
#### Code

```{r}
#| label: reshape long
# The hexadecimal code below can be passed directly to ggplot to add color. 
# Excel default colors
blue <- "#3C67BE"
orange <- "#F27A2A"

# Reshape the data long for ggplot geom_col stacked bar graph
df_long <- 
  df %>% 
  pivot_longer(
    cols = local:international,
    names_to = "type",
    values_to = "share"
  ) %>%
  mutate(fill_color = case_when(
    type == "local" ~ blue,
    TRUE ~ orange
    )
  ) %>% 
  rename(ou = operating_unit, 
         ou_long = operating_unit_long) %>% 
  arrange(ou)
```

#### Data

```{r}
#| label: inspect long
df_long %>% 
  slice(1:10) %>% 
  gt::gt() %>% 
  gtExtras::gt_theme_nytimes()
```
:::

### Building a plot from the ground up

To create a stacked bar graph with ggplot we can use the `geom_col()` geometry.

::: panel-tabset
#### Code

```{r `code-line-numbers` = "2,3"}
#| label: base plot
p <- df_long %>% 
  ggplot(aes(y = ou_long, x = share)) +
  geom_col(aes(fill = fill_color),
           position = position_stack(reverse = T)) + # position_stack to alter order
  labs(
    x = NULL, y = NULL,
    title = "FY 21 Local vs. International Budget - All Agencies",
    fill = NULL
  ) +
  scale_fill_identity()
```

#### Plot

```{r}
#| label: base plot printed
p
```
:::

### Adding text labels

::: panel-tabset
#### Code

```{r}
#| label: label plot
p1 <- df_long %>% 
  ggplot(aes(y = ou_long, x = share)) +
  geom_col(aes(fill = fill_color),
           position = position_stack(reverse = T)) +
  geom_label(aes(label = scales::percent(share, 1)), # Adds labels
    size = 8 / .pt, 
    position = position_stack(vjust = 0.5)
  ) +
  labs(
    x = NULL, y = NULL,
    title = "FY 21 Local vs. International Budget - All Agencies",
    fill = NULL
  ) +
  scale_fill_identity()

```

#### Plot

```{r}
#| label: label plot printed
p1
```
:::

### Sorting data

::: panel-tabset
#### Desired Plot

![](images/p1_markup-01-01.png)

#### Code

```{r}
#| label: sort plot
df_long_ordered <- 
  df_long %>% 
  mutate(
   lp_value = case_when(
    type == "local" ~ share, # Creating a new column to sort factors on
    TRUE ~ NA_real_), 
   ou = fct_reorder(ou, lp_value), # overwrite ou into a factor 
   ou = fct_relevel(ou, "Total", after = Inf) # move Total to the Top of factor list
   ) %>% 
  arrange(ou)
  
p2 <- df_long_ordered %>% 
  ggplot(aes(y = ou, x = share)) + # Use the factor column as y-axis 
  geom_col(aes(fill = fill_color), 
           position = position_stack(reverse = TRUE)) +
  geom_label(aes(label = scales::percent(share, 1)), # Adds labels
    size = 8 / .pt, 
    position = position_stack(vjust = 0.5)
  ) +
  labs(
    x = NULL, y = NULL,
    title = "FY 21 Local vs. International Budget - All Agencies",
    fill = NULL
  ) +
  scale_fill_identity()
```

#### Plot

```{r}
#| label: sort plot printed
p2
```
:::

Sorting the data makes a huge difference already. We can start to see some order in the data. In fact, it looks like a majority of the operating units are below the 50% threshold. For the sake of this exercise, let's focus on the 70% threshold as that is what is important to USAID.

### Getting it right in black and white

One of our common operating procedures is to try to get a plot right first in black and white, and then add color as needed. To convert the filled bars to black and white we can either create a new column and pass that to the `scale_fill_identity()` function or we can use `scale_fill_manual()` to manually recolor.

::: panel-tabset
#### Desired Plot

![](images/p2_right_n_black_n_white-01.png)

#### Code

```{r `code-line-numbers` ="6-8"}
#| label: bw plot
df_long_ordered_bw <- 
  df_long_ordered %>% 
  mutate(fill_color = case_when(
    type == "local" ~ grey90k,
    TRUE ~ grey30k
  )) 
  
p3 <- df_long_ordered_bw %>% 
  ggplot(aes(y = ou, x = share)) +
  geom_col(aes(fill = fill_color), 
           position = position_stack(reverse = TRUE)) +
  geom_label(aes(label = scales::percent(share, 1)), # Adds labels
    size = 8 / .pt, 
    position = position_stack(vjust = 0.5)
  ) +
  scale_fill_identity() +
  labs(
    x = NULL, y = NULL,
    title = "FY 21 Local vs. International Budget - All Agencies",
    fill = NULL
  ) 
```

#### Plot

```{r}
#| label: bw plot printed
p3
```
:::

### Removing labels?

Too many labels can make a plot feel clustered. We want the reader to focus on the most important points and if we try to highlight everything, it can be difficult to know where to focus attention.

::: panel-tabset
#### Desired Plot

![](images/p3_declutter-01.png)

#### Code

```{r}
#| label: lab plot
p4 <- df_long_ordered_bw %>% 
  ggplot(aes(y = ou, x = share)) +
  geom_col(aes(fill = fill_color), 
           position = position_stack(reverse = TRUE)) +
  scale_fill_identity() +
  labs(
    x = NULL, y = NULL,
    title = "FY 21 Local vs. International Budget - All Agencies",
    fill = NULL
  ) 
```

#### Plot

```{r}
#| label: lab plot printed
p4
```
:::

### Filtering out unnecessary rows

In this case, the labels do not add much value, in fact they are kind of distracting. If the share in each country has to add to 100 and the focus of the graphic is on the local partner share, we can drop one of the labels and let the reader calculate the international share independently (it's not the focus).

One way to remove the international shares from the graph would be to filter the data frame to `type == "local"`. With the international share bar and text dropped, we can also soften the labels using the `geom_text()` function. This drops the stroke and fill around the text object.

::: panel-tabset
#### Desired Plot

![](images/p4_drop_extra_bars-01.png)

#### Code

```{r}
#| label: filtered plot
p5 <- df_long_ordered_bw %>% 
  filter(type == "local") %>% 
  ggplot(aes(y = ou, x = share)) +
  geom_col(aes(fill = type)) +
  scale_fill_manual(values = c("local" = "#be3455")) +
  geom_text(aes(label = percent(share, 1)),
    size = 7 / .pt,
    hjust = 0,
  ) +
  labs(
    x = NULL, y = NULL,
    title = "FY 21 Local vs. International Budget - All Agencies",
    fill = NULL
  ) 
```

#### Plot

```{r}
#| label: filtered plot printed
p5
```
:::

### Creating breathing room with facets

If you recall from earlier in our talk, we mentioned that the USAID local partner goal was 70%. How can we break up the operating units to create some groupings?

::: panel-tabset
#### Desired Plot

![](images/p5_facet-01.png)

#### Munge Code

```{r}
#| label: facet munge
df_long_ordered_bw_goal <- 
  df_long_ordered_bw %>% 
 filter(type == "local") %>% 
 mutate(
    facet_order = case_when(
      ou == "Total" ~ "",
      goal == 1 ~ "> 70%",
      TRUE ~ "< 70%"
    ),
    facet_order = fct_relevel(facet_order, c("", "> 70%", "< 70%"))
  ) %>%
  mutate(recolor = case_when(
    facet_order == "" ~ "#7f2339",
    goal == 1 ~ "#be3455",
    goal == 0 ~ "#d38388",
    TRUE ~ grey20k)
  )
```

#### Plot Code

```{r}
#| label: facet plot
p6 <- df_long_ordered_bw_goal %>% 
  ggplot(aes(y = ou, x = share)) +
  geom_vline(xintercept = .7, linewidth = 2, color = grey10k, alpha = 0.75) +
  geom_col(aes(fill = recolor)) +
  scale_fill_identity() +
  geom_text(aes(label = percent(share, 1)),
    size = 7 / .pt,
    hjust = 0,
  ) +
  labs(
    x = NULL, y = NULL,
    title = "FY 21 Local vs. International Budget - All Agencies",
    fill = NULL
  ) +
  scale_x_continuous(limits = c(0, 1.1)) +
  facet_grid(facet_order ~ ., scales = "free_y", drop = T, space = "free") 
```

#### Plot

```{r}
#| label: facet plot printed
p6
```
:::

### Reducing clutter

Starting to get some breathing room, but we still have a lot of extra chart junk competing for our attention. Let's continue to reduce clutter and focus the visualization on the 70% threshold.

::: panel-tabset
#### Desired Plot

![](images/p6_more_clutter-01.png)

#### Code

```{r}
#| label: decluttered plot
p7 <- df_long_ordered_bw_goal %>% 
  ggplot(aes(y = ou, x = share)) +
  geom_vline(xintercept = .7, linewidth = 2, color = grey10k, alpha = 0.75) +
  geom_col(aes(fill = recolor)) +
  scale_fill_identity() +
  geom_text(aes(label = percent(share, 1)),
    size = 7 / .pt,
    hjust = 0,
    family = "Source Sans Pro"
  ) +
  labs(
    x = NULL, y = NULL,
    title = "FY 21 Local vs. International Budget - All Agencies",
    fill = NULL
  ) +
  si_style_yline(facet_space = 0.5) +
  scale_x_continuous(limits = c(0, 1.1)) +
  facet_grid(facet_order ~ ., scales = "free_y", drop = T, space = "free") +
  theme(strip.background = element_blank(),
        strip.text = element_blank(),
        axis.text.x = element_blank(), 
        axis.text.y = element_text(size = 8)) 

```

#### Plot

```{r}
#| label: decluttered plot printed
p7
```
:::

### Cleaning up the edges & adding annotation

::: panel-tabset
#### Desired Plot

![](images/p7_final_touches-01.png)

#### Code

```{r}
#| label: annotate plot
goal_text <- "Four OUs reached\nthe 70% goal"
fail_text <- "All of these operating\nunits fell short of the\n70% goal"
font_size <- 7/.pt

p8 <- p7 +
  coord_cartesian(clip = "off", expand = F) +
  geom_text(data = . %>% filter(facet_order == ""), 
            aes(x = .45, label = "local partner share"),
            color = "white", size = font_size) +
    geom_text(data = . %>% filter(facet_order == ""), 
            aes(x = .71, label = "70% threshold"),
            color = grey60k, size = font_size, 
            hjust = -0.1) +
  geom_text(data = . %>% filter(facet_order == "> 70%" & ou == "Rwanda"), 
            aes(x = .9, label = goal_text),
            color = "#be3455", size = font_size, 
            vjust = 1, hjust = 0) +
  geom_text(data = . %>% filter(facet_order == "< 70%" & ou == "Botswana"), 
            aes(x = .72, label = fail_text),
            color = "#d38388", size = font_size, 
            vjust = 1, hjust = 0) +
  
  labs(title = "IN FY21, FOUR OPERATING UNITS HAD ACHIEVED THE USAID LOCAL\nPARTNER BUDGET SHARE GOAL OF 70%",
    subtitle = "Twenty four operating units are still short of the goal.",
    fill = NULL,
    caption = glue("Source: Local Partner Team Data"))
```

#### Plot

```{r}
#| label: annotate plot printed
p8
```
:::
